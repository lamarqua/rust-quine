static G_DATA: [u8; 938] = [ 0x0a, 0x75, 0x73, 0x65, 0x20, 0x73, 0x74, 0x64, 0x3a, 0x3a, 0x65, 0x6e, 0x76, 0x3b, 0x0a, 0x75, 0x73, 0x65, 0x20, 0x73, 0x74, 0x64, 0x3a, 0x3a, 0x73, 0x74, 0x72, 0x3b, 0x0a, 0x75, 0x73, 0x65, 0x20, 0x73, 0x74, 0x64, 0x3a, 0x3a, 0x69, 0x6f, 0x3a, 0x3a, 0x7b, 0x73, 0x65, 0x6c, 0x66, 0x2c, 0x20, 0x52, 0x65, 0x61, 0x64, 0x7d, 0x3b, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x21, 0x20, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x5f, 0x66, 0x6d, 0x74, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x20, 0x7b, 0x28, 0x29, 0x20, 0x3d, 0x3e, 0x20, 0x28, 0x22, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x3a, 0x20, 0x5b, 0x75, 0x38, 0x3b, 0x20, 0x7b, 0x7d, 0x5d, 0x20, 0x3d, 0x20, 0x5b, 0x22, 0x29, 0x7d, 0x0a, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x21, 0x20, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x5f, 0x66, 0x6d, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x20, 0x7b, 0x28, 0x29, 0x20, 0x3d, 0x3e, 0x20, 0x28, 0x22, 0x20, 0x5d, 0x3b, 0x5c, 0x6e, 0x22, 0x29, 0x7d, 0x0a, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x21, 0x20, 0x67, 0x5f, 0x73, 0x65, 0x70, 0x20, 0x7b, 0x28, 0x29, 0x20, 0x3d, 0x3e, 0x20, 0x20, 0x28, 0x22, 0x22, 0x29, 0x7d, 0x0a, 0x0a, 0x66, 0x6e, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x20, 0x7b, 0x0a, 0x09, 0x6c, 0x65, 0x74, 0x20, 0x6d, 0x75, 0x74, 0x20, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x3b, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x72, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x65, 0x6e, 0x76, 0x3a, 0x3a, 0x61, 0x72, 0x67, 0x73, 0x28, 0x29, 0x20, 0x7b, 0x0a, 0x09, 0x09, 0x69, 0x66, 0x20, 0x61, 0x72, 0x67, 0x20, 0x3d, 0x3d, 0x20, 0x22, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x20, 0x7b, 0x0a, 0x09, 0x09, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x20, 0x3d, 0x20, 0x74, 0x72, 0x75, 0x65, 0x3b, 0x0a, 0x09, 0x09, 0x7d, 0x0a, 0x09, 0x7d, 0x0a, 0x0a, 0x09, 0x69, 0x66, 0x20, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x20, 0x7b, 0x0a, 0x09, 0x09, 0x6c, 0x65, 0x74, 0x20, 0x6d, 0x75, 0x74, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x6e, 0x65, 0x77, 0x28, 0x29, 0x3b, 0x0a, 0x09, 0x09, 0x69, 0x6f, 0x3a, 0x3a, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x28, 0x29, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x26, 0x6d, 0x75, 0x74, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x29, 0x2e, 0x75, 0x6e, 0x77, 0x72, 0x61, 0x70, 0x28, 0x29, 0x3b, 0x0a, 0x0a, 0x09, 0x09, 0x6c, 0x65, 0x74, 0x20, 0x76, 0x3a, 0x20, 0x56, 0x65, 0x63, 0x3c, 0x26, 0x73, 0x74, 0x72, 0x3e, 0x20, 0x3d, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x28, 0x67, 0x5f, 0x73, 0x65, 0x70, 0x21, 0x28, 0x29, 0x29, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x29, 0x3b, 0x0a, 0x09, 0x09, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x65, 0x71, 0x21, 0x28, 0x76, 0x2e, 0x6c, 0x65, 0x6e, 0x28, 0x29, 0x2c, 0x20, 0x33, 0x29, 0x3b, 0x0a, 0x09, 0x09, 0x6c, 0x65, 0x74, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x5b, 0x31, 0x2e, 0x2e, 0x33, 0x5d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x28, 0x29, 0x3b, 0x0a, 0x09, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x21, 0x28, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x5f, 0x66, 0x6d, 0x74, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x21, 0x28, 0x29, 0x2c, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x6c, 0x65, 0x6e, 0x28, 0x29, 0x29, 0x3b, 0x0a, 0x09, 0x09, 0x66, 0x6f, 0x72, 0x20, 0x62, 0x20, 0x69, 0x6e, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x61, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x28, 0x29, 0x20, 0x7b, 0x0a, 0x09, 0x09, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x21, 0x28, 0x22, 0x20, 0x30, 0x78, 0x7b, 0x3a, 0x30, 0x32, 0x78, 0x7d, 0x2c, 0x22, 0x2c, 0x20, 0x62, 0x29, 0x3b, 0x0a, 0x09, 0x09, 0x7d, 0x0a, 0x09, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x21, 0x28, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x5f, 0x66, 0x6d, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x21, 0x28, 0x29, 0x29, 0x3b, 0x0a, 0x09, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x21, 0x28, 0x22, 0x7b, 0x7d, 0x22, 0x2c, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x29, 0x3b, 0x3b, 0x0a, 0x09, 0x7d, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0a, 0x09, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x21, 0x28, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x5f, 0x66, 0x6d, 0x74, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x21, 0x28, 0x29, 0x2c, 0x20, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x2e, 0x6c, 0x65, 0x6e, 0x28, 0x29, 0x29, 0x3b, 0x0a, 0x09, 0x09, 0x66, 0x6f, 0x72, 0x20, 0x62, 0x20, 0x69, 0x6e, 0x20, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x2e, 0x69, 0x74, 0x65, 0x72, 0x28, 0x29, 0x20, 0x7b, 0x0a, 0x09, 0x09, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x21, 0x28, 0x22, 0x20, 0x30, 0x78, 0x7b, 0x3a, 0x30, 0x32, 0x78, 0x7d, 0x2c, 0x22, 0x2c, 0x20, 0x62, 0x29, 0x3b, 0x0a, 0x09, 0x09, 0x7d, 0x0a, 0x09, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x21, 0x28, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x5f, 0x66, 0x6d, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x21, 0x28, 0x29, 0x29, 0x3b, 0x0a, 0x09, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x21, 0x28, 0x22, 0x7b, 0x7d, 0x22, 0x2c, 0x20, 0x73, 0x74, 0x72, 0x3a, 0x3a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x74, 0x66, 0x38, 0x28, 0x26, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x29, 0x2e, 0x75, 0x6e, 0x77, 0x72, 0x61, 0x70, 0x28, 0x29, 0x29, 0x3b, 0x0a, 0x09, 0x7d, 0x0a, 0x7d, 0x0a, ];

use std::env;
use std::str;
use std::io::{self, Read};

macro_rules! g_data_decl_fmt_begin {() => ("static G_DATA: [u8; {}] = [")}
macro_rules! g_data_decl_fmt_end {() => (" ];\n")}
macro_rules! g_sep {() =>  ("")}

fn main() {
	let mut self_modify = false;
	for arg in env::args() {
		if arg == "secret" {
			self_modify = true;
		}
	}

	if self_modify {
		let mut buffer = String::new();
		io::stdin().read_to_string(&mut buffer).unwrap();

		let v: Vec<&str> = buffer.split(g_sep!()).collect();
		assert_eq!(v.len(), 3);
		let buffer = v[1..3].concat();
		print!(g_data_decl_fmt_begin!(), buffer.len());
		for b in buffer.as_bytes() {
			print!(" 0x{:02x},", b);
		}
		print!(g_data_decl_fmt_end!());
		print!("{}", buffer);;
	} else {
		print!(g_data_decl_fmt_begin!(), G_DATA.len());
		for b in G_DATA.iter() {
			print!(" 0x{:02x},", b);
		}
		print!(g_data_decl_fmt_end!());
		print!("{}", str::from_utf8(&G_DATA).unwrap());
	}
}
